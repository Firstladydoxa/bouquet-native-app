import { DailyPdfReader } from '@/components/rhapsodylanguages/DailyPdfReader';
import CustomLoader from '@/components/ui/CustomLoader';
import { useThemeColors } from '@/hooks/use-themed-styles';
import { useSubscriptionService } from '@/services/subscriptionService';
import { Ionicons } from '@expo/vector-icons';
import { router, useLocalSearchParams } from 'expo-router';
import React from 'react';
import { SafeAreaView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function ReadPage() {
    const { code } = useLocalSearchParams<{ code: string }>();
    const colors = useThemeColors();
    const subscriptionService = useSubscriptionService();
    const styles = createStyles(colors);

    // Create a mock language object for validation since we only have the code
    const mockLanguage = {
        country_id: 1,
        value: code || '',
        label: decodeURIComponent(code || ''),
        type: 'subscription' as const, // Assume premium content
        read: '',
        listen: '',
        pivot: {
            country_id: 1,
            rorlanguage_id: 1
        }
    };

    // Validate subscription access
    const accessResult = subscriptionService.checkLanguageAccess(mockLanguage);

    if (!accessResult.hasAccess) {
        return (
            <SafeAreaView style={styles.container}>
                <View style={styles.header}>
                    <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
                        <Ionicons name="arrow-back" size={24} color={colors.text} />
                    </TouchableOpacity>
                    <Text style={styles.headerTitle}>Read - {decodeURIComponent(code)}</Text>
                </View>
                <View style={styles.errorContainer}>
                    <Ionicons name="lock-closed-outline" size={64} color={colors.textLight} />
                    <Text style={styles.errorTitle}>Premium Content</Text>
                    <Text style={styles.errorMessage}>{accessResult.message}</Text>
                    <TouchableOpacity 
                        style={styles.upgradeButton} 
                        onPress={() => router.push('/(rhapsodylanguages)/(drawer)/(tabs)/subscriptions/')}
                    >
                        <Text style={styles.upgradeButtonText}>Upgrade Now</Text>
                    </TouchableOpacity>
                </View>
            </SafeAreaView>
        );
    }

    if (!code) {
        return (
            <SafeAreaView style={styles.container}>
                <View style={styles.header}>
                    <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
                        <Ionicons name="arrow-back" size={24} color={colors.text} />
                    </TouchableOpacity>
                    <Text style={styles.headerTitle}>Read</Text>
                </View>
                <View style={styles.errorContainer}>
                    <Ionicons name="document-outline" size={64} color={colors.textLight} />
                    <Text style={styles.errorTitle}>No Document Selected</Text>
                    <Text style={styles.errorMessage}>Please select a document to read</Text>
                    <TouchableOpacity style={styles.backButtonContainer} onPress={() => router.back()}>
                        <Text style={styles.backButtonText}>Go Back</Text>
                    </TouchableOpacity>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.container}>
            <View style={styles.header}>
                <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
                    <Ionicons name="arrow-back" size={24} color={colors.text} />
                </TouchableOpacity>
                <Text style={styles.headerTitle}>Read - {decodeURIComponent(code)}</Text>
            </View>
            
            <View style={styles.errorContainer}>
                <Ionicons name="document-text-outline" size={64} color={colors.textLight} />
                <Text style={styles.errorTitle}>PDF Reader</Text>
                <Text style={styles.errorMessage}>
                    PDF reading functionality will be integrated here.{'\n'}
                    Currently working on native PDF implementation.
                </Text>
                <TouchableOpacity style={styles.backButtonContainer} onPress={() => router.back()}>
                    <Text style={styles.backButtonText}>Go Back</Text>
                </TouchableOpacity>
            </View>
        </SafeAreaView>
    );
}

const createStyles = (colors: any) => StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: colors.background,
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: 16,
        borderBottomWidth: 1,
        borderBottomColor: colors.border,
        backgroundColor: colors.card,
        elevation: 3,
        shadowColor: colors.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
    },
    backButton: {
        marginRight: 12,
        padding: 8,
        borderRadius: 20,
        backgroundColor: colors.primary + '15',
    },
    headerTitle: {
        fontSize: 18,
        fontWeight: '600',
        color: colors.text,
        flex: 1,
    },
    errorContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 24,
        gap: 16,
    },
    errorTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        color: colors.text,
        textAlign: 'center',
    },
    errorMessage: {
        fontSize: 16,
        color: colors.textLight,
        textAlign: 'center',
        lineHeight: 24,
    },
    upgradeButton: {
        backgroundColor: colors.primary,
        paddingVertical: 14,
        paddingHorizontal: 32,
        borderRadius: 25,
        elevation: 4,
        shadowColor: colors.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 8,
    },
    upgradeButtonText: {
        color: '#FFFFFF',
        fontSize: 16,
        fontWeight: '600',
        textAlign: 'center',
    },
    backButtonContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: colors.surface,
        paddingVertical: 14,
        paddingHorizontal: 24,
        borderRadius: 25,
        borderWidth: 1,
        borderColor: colors.border,
    },
    backButtonText: {
        color: colors.text,
        fontSize: 16,
        fontWeight: '600',
    },
});

export default function ReadLanguageScreen() {
    const router = useRouter();
    const { user } = useAuth();
    const colors = useThemeColors();
    const subscriptionService = useSubscriptionService();
    const { code } = useLocalSearchParams<{ code: string }>();
    
    const [loading, setLoading] = useState(true);
    const [pdfUrl, setPdfUrl] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [languageLabel, setLanguageLabel] = useState<string>('');

    const styles = createStyles(colors);

    useEffect(() => {
        if (user && code) {
            const decodedLanguage = decodeURIComponent(code);
            setLanguageLabel(decodedLanguage);
            fetchPdfFile(decodedLanguage);
        }
    }, [user, code]);

    const fetchPdfFile = async (language: string) => {
        try {
            setLoading(true);
            setError(null);

            // Check subscription access first
            const mockLanguage = { label: language, type: 'open' as const }; // We'll need to get this from API
            const access = subscriptionService.checkLanguageAccess(mockLanguage);
            
            if (!access.hasAccess) {
                setError(access.message || 'Access denied');
                setLoading(false);
                return;
            }

            const fileName = await RhapsodyLanguagesAPI.fetchLanguageFile({
                user_id: user!.id,
                type: 'read',
                language: language,
            });

            if (fileName) {
                const remotePdfUrl = `https://mediathek.tniglobal.org/read/${fileName}`;
                setPdfUrl(remotePdfUrl);
            } else {
                setError('PDF file not found for this language');
            }
        } catch (err: any) {
            console.error('Error fetching PDF file:', err);
            setError(err.message || 'Failed to load PDF file');
        } finally {
            setLoading(false);
        }
    };

    const handleClose = () => {
        router.back();
    };

    const handleRetry = () => {
        if (languageLabel) {
            fetchPdfFile(languageLabel);
        }
    };

    if (loading) {
        return (
            <SafeAreaView style={styles.container}>
                <CustomLoader message={`Loading ${languageLabel} Rhapsody...`} size="large" />
            </SafeAreaView>
        );
    }

    if (error) {
        return (
            <SafeAreaView style={styles.container}>
                <View style={styles.errorContainer}>
                    <TouchableOpacity style={styles.backButton} onPress={handleClose}>
                        <Ionicons name="arrow-back" size={24} color={colors.text} />
                    </TouchableOpacity>
                    
                    <View style={styles.errorContent}>
                        <Ionicons name="alert-circle-outline" size={64} color={colors.error} />
                        <Text style={styles.errorTitle}>Unable to Load Rhapsody</Text>
                        <Text style={styles.errorText}>{error}</Text>
                        
                        <View style={styles.errorActions}>
                            <TouchableOpacity style={styles.retryButton} onPress={handleRetry}>
                                <Ionicons name="refresh" size={20} color="#FFFFFF" />
                                <Text style={styles.retryButtonText}>Try Again</Text>
                            </TouchableOpacity>
                            
                            <TouchableOpacity style={styles.backButtonLarge} onPress={handleClose}>
                                <Text style={styles.backButtonText}>Go Back</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </View>
            </SafeAreaView>
        );
    }

    if (pdfUrl) {
        return (
            <DailyPdfReader
                pdfUrl={pdfUrl}
                languageLabel={languageLabel}
                onClose={handleClose}
            />
        );
    }

    return (
        <SafeAreaView style={styles.container}>
            <View style={styles.errorContainer}>
                <Ionicons name="document-outline" size={64} color={colors.textLight} />
                <Text style={styles.errorTitle}>No PDF Available</Text>
                <Text style={styles.errorText}>
                    The Rhapsody document for {languageLabel} is not available at this time.
                </Text>
                <TouchableOpacity style={styles.backButtonLarge} onPress={handleClose}>
                    <Text style={styles.backButtonText}>Go Back</Text>
                </TouchableOpacity>
            </View>
        </SafeAreaView>
    );
}

const createStyles = (colors: any) => StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: colors.background,
    },
    errorContainer: {
        flex: 1,
        padding: 20,
    },
    backButton: {
        alignSelf: 'flex-start',
        padding: 12,
        borderRadius: 24,
        backgroundColor: colors.primary + '15',
        marginBottom: 20,
    },
    errorContent: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        gap: 20,
    },
    errorTitle: {
        fontSize: 24,
        fontWeight: '700',
        color: colors.text,
        textAlign: 'center',
    },
    errorText: {
        fontSize: 16,
        color: colors.textLight,
        textAlign: 'center',
        lineHeight: 24,
        paddingHorizontal: 20,
    },
    errorActions: {
        gap: 12,
        width: '100%',
        paddingHorizontal: 20,
    },
    retryButton: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: colors.primary,
        paddingVertical: 14,
        paddingHorizontal: 24,
        borderRadius: 25,
        gap: 8,
    },
    retryButtonText: {
        color: '#FFFFFF',
        fontSize: 16,
        fontWeight: '600',
    },
    backButtonLarge: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: colors.surface,
        paddingVertical: 14,
        paddingHorizontal: 24,
        borderRadius: 25,
        borderWidth: 1,
        borderColor: colors.border,
    },
    backButtonText: {
        color: colors.text,
        fontSize: 16,
        fontWeight: '600',
    },
});
